---
description: 
globs: 
alwaysApply: false
---
# Workflow Execution

Always start by managing the workflow:

1. **Check** `./plans/current.md`
2. **If exists**: Read to understand progress
3. **If missing**: Create using workflow.mdc template
4. **Execute** the user's request
5. **Update** the plan after each task completion
6. **Lint** Run `npm run lint:eslint:commit` after completing tasks
   - If errors exist, fix them before marking the task complete
   - Update the plan only after linting passes

Begin checking the plan file now.

## Examples:

### Example 1: Starting a New Project
```markdown
User: "Create a REST API for user management"

AI Actions:
1. Check ./plans/current.md ❌ (doesn't exist)
2. Create ./plans/current.md:

# User Management REST API

## 🎯 Overview
Building a REST API for user CRUD operations

**Purpose**: Provide API endpoints for user management
**Current**: No existing API
**Goal**: Full CRUD API with authentication

## 📊 Status

| Task | Status | Priority | Notes |
|------|--------|----------|-------|
| Setup Express server | 🔴 Not Started | P0 | Basic server setup |
| Create user routes | 🔴 Not Started | P0 | CRUD endpoints |
| Add authentication | 🔴 Not Started | P1 | JWT implementation |
| Add validation | 🔴 Not Started | P1 | Input validation |

3. Begin implementation...
4. Run `npm run lint:eslint:commit` to check for linting errors
5. Fix any linting errors found
6. After linting passes: Update status to 🟢 Complete
```

### Example 2: Continuing Existing Work
```markdown
User: "Add pagination to the user list endpoint"

AI Actions:
1. Check ./plans/current.md ✅ (exists)
2. Read current progress:
   - Express server ✅ Complete
   - User routes ✅ Complete
   - Authentication 🟡 In Progress
3. Understand context from plan
4. Implement pagination feature
5. Run `npm run lint:eslint:commit`
6. Fix any linting errors
7. Update plan after linting passes:

## 📊 Status
| Task | Status | Priority | Notes |
|------|--------|----------|-------|
| Setup Express server | 🟢 Complete | P0 | Done 2024-01-15 |
| Create user routes | 🟢 Complete | P0 | Done 2024-01-15 |
| Add pagination | 🟢 Complete | P1 | Added limit/offset, linted |
| Add authentication | 🟡 In Progress | P1 | JWT implementation |
```

### Example 3: Handling Blocked Tasks
```markdown
User: "Implement OAuth integration"

AI Actions:
1. Check ./plans/current.md
2. Discover missing OAuth credentials needed
3. Update plan with blocker:

| OAuth integration | 🔵 Blocked | P1 | Need client ID/secret |

4. Inform user:
"I've started the OAuth integration but need the OAuth client ID and secret to proceed. I've marked this as blocked in the workflow plan."
```

### Example 4: Fixing Linting Errors
```markdown
User: "Add error handling middleware"

AI Actions:
1. Implement error handling middleware
2. Run `npm run lint:eslint:commit`
3. Output shows: "ESLint found 3 errors"
4. Fix the linting errors:
   - Add missing semicolons
   - Fix unused variable
   - Correct indentation
5. Re-run `npm run lint:eslint:commit`
6. Linting passes ✅
7. Update workflow plan:

| Error handling | 🟢 Complete | P1 | Middleware added, linted |
```

