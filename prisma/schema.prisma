// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    discordId     String?   @unique
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CommodityData {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    unixDate    Int      // Store timestamp as milliseconds since epoch (using Int)
    type        String   // e.g., "Cattle", "Hogs", "Barley"
    category    String   // e.g., "Livestock", "Crop", "Produce"
    country     String
    state       String?  // Optional, only for USA relevant types
    // Specific numerical fields - adjust based on all possible fields in dataTypeConfigs
    exports     Float?
    price       Float?
    head        Int?
    totalVolume Float?   @map("total volume") // Map field name with space

    // Specific categorical fields - adjust based on all possible fields
    cattleType  String? @map("Cattle Type") // Map field name with space
    choiceGrade String? @map("Choice Grade") // Map field name with space

    // Add indexes for common query patterns
    @@index([unixDate])
    @@index([type])
    @@index([country, state])
    @@index([type, country, state, unixDate])
}
