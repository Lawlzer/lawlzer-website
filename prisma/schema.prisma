// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    discordId     String?   @unique
    
    // Cooking relationships
    foods         Food[]
    recipes       Recipe[]
    days          Day[]
    goals         Goal[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CommodityData {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    unixDate    Int      // Store timestamp as milliseconds since epoch (using Int)
    type        String   // e.g., "Cattle", "Hogs", "Barley"
    category    String   // e.g., "Livestock", "Crop", "Produce"
    country     String
    state       String?  // Optional, only for USA relevant types
    // Specific numerical fields - adjust based on all possible fields in dataTypeConfigs
    exports     Float?
    price       Float?
    head        Int?
    totalVolume Float?   @map("total volume") // Map field name with space

    // Specific categorical fields - adjust based on all possible fields
    cattleType  String? @map("Cattle Type") // Map field name with space
    choiceGrade String? @map("Choice Grade") // Map field name with space

    // Add indexes for common query patterns
    @@index([unixDate])
    @@index([type])
    @@index([country, state])
    @@index([type, country, state, unixDate])
}

// ========== COOKING SUBDOMAIN MODELS ==========

// Base nutrition item - can be an ingredient or a complete food
model Food {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String?  @db.ObjectId // Null for system/public foods
    barcode     String?  // For scanned products
    name        String
    brand       String?
    
    // Nutrition per 100g
    calories    Float
    protein     Float    @default(0)
    carbs       Float    @default(0)
    fat         Float    @default(0)
    fiber       Float    @default(0)
    sugar       Float    @default(0)
    sodium      Float    @default(0) // in mg
    
    // Additional nutrition fields
    saturatedFat     Float? @default(0)
    transFat         Float? @default(0)
    cholesterol      Float? @default(0) // in mg
    potassium        Float? @default(0) // in mg
    vitaminA         Float? @default(0) // in IU
    vitaminC         Float? @default(0) // in mg
    calcium          Float? @default(0) // in mg
    iron             Float? @default(0) // in mg
    
    defaultServingSize Float   @default(100) // in grams
    defaultServingUnit String  @default("g")
    
    visibility  String   @default("private") // "private", "public"
    imageUrl    String?
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User?    @relation(fields: [userId], references: [id])
    recipeItems RecipeItem[]
    dayEntries  DayEntry[]
    
    @@index([userId])
    @@index([barcode])
    @@index([name])
    @@index([visibility])
}

// Recipe that can contain foods or other recipes
model Recipe {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    name        String
    description String?
    notes       String?  // Cooking instructions
    prepTime    Int?     // in minutes
    cookTime    Int?     // in minutes
    servings    Int      @default(1)
    
    visibility  String   @default("private") // "private", "unlisted", "public"
    isComponent Boolean  @default(false)     // True if this is an ingredient for other recipes
    imageUrl    String?
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id])
    versions    RecipeVersion[]
    currentVersion RecipeVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    currentVersionId String? @db.ObjectId @unique
    
    // Recipe can be used in other recipes
    usedInRecipeItems RecipeItem[] @relation("RecipeAsIngredient")
    
    @@index([userId])
    @@index([name])
    @@index([visibility])
}

// Version tracking for recipes
model RecipeVersion {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    recipeId    String   @db.ObjectId
    version     Int
    
    // Snapshot of recipe data at this version
    name        String
    description String?
    notes       String?
    prepTime    Int?
    cookTime    Int?
    servings    Int
    
    // Calculated nutrition per serving
    caloriesPerServing Float
    proteinPerServing  Float
    carbsPerServing    Float
    fatPerServing      Float
    fiberPerServing    Float
    sugarPerServing    Float
    sodiumPerServing   Float
    
    createdAt   DateTime @default(now())
    
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    items       RecipeItem[]
    dayEntries  DayEntry[]
    
    // For current version reference
    currentForRecipe Recipe? @relation("CurrentVersion")
    
    @@unique([recipeId, version])
    @@index([recipeId])
}

// Junction table for recipe composition
model RecipeItem {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    recipeVersionId String   @db.ObjectId
    
    // Either food or recipe (one must be set)
    foodId          String?  @db.ObjectId
    recipeId        String?  @db.ObjectId // Reference to another recipe
    
    amount          Float    // Amount in grams
    unit            String   @default("g") // g, ml, tbsp, tsp, cup, etc.
    
    recipeVersion   RecipeVersion @relation(fields: [recipeVersionId], references: [id])
    food            Food?         @relation(fields: [foodId], references: [id])
    recipe          Recipe?       @relation("RecipeAsIngredient", fields: [recipeId], references: [id])
    
    @@index([recipeVersionId])
}

// Daily tracking
model Day {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    date        DateTime @db.Date // Date only, no time
    
    // Daily goals (can override user defaults)
    targetCalories Float?
    targetProtein  Float?
    targetCarbs    Float?
    targetFat      Float?
    targetFiber    Float?
    
    notes       String?
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id])
    entries     DayEntry[]
    
    @@unique([userId, date])
    @@index([userId])
    @@index([date])
}

// What was eaten on a specific day
model DayEntry {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    dayId           String   @db.ObjectId
    
    // Either food or recipe version
    foodId          String?  @db.ObjectId
    recipeVersionId String?  @db.ObjectId
    
    amount          Float    // Amount consumed in grams
    mealType        String?  // breakfast, lunch, dinner, snack
    
    // Snapshot nutrition (in case food/recipe changes)
    calories        Float
    protein         Float
    carbs           Float
    fat             Float
    fiber           Float
    sugar           Float
    sodium          Float
    
    consumedAt      DateTime @default(now())
    
    day             Day           @relation(fields: [dayId], references: [id])
    food            Food?         @relation(fields: [foodId], references: [id])
    recipeVersion   RecipeVersion? @relation(fields: [recipeVersionId], references: [id])
    
    @@index([dayId])
}

// User nutrition goals
model Goal {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    
    // Daily targets
    calories    Float
    protein     Float?   // in grams
    carbs       Float?   // in grams
    fat         Float?   // in grams
    fiber       Float?   // in grams
    sugar       Float?   // in grams
    sodium      Float?   // in mg
    
    // Macro percentages (optional alternative to absolute values)
    proteinPercentage Float?
    carbsPercentage   Float?
    fatPercentage     Float?
    
    isActive    Boolean  @default(true)
    startDate   DateTime @default(now())
    endDate     DateTime?
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id])
    
    @@index([userId, isActive])
}
