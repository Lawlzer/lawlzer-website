# .github/workflows/deploy.yml
name: Deploy to AWS ECS via Pulumi

on:
  push:
    branches:
      - main # Or your primary deployment branch

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Required to check out the code

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Optional: Link to a GitHub environment for secrets/protection rules
    # environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match version used for Pulumi project if needed

      - name: Install Pulumi Project Dependencies
        run: npm install --frozen-lockfile
        working-directory: ./pulumi # Run in the pulumi directory

      # --- Configure AWS Credentials using OIDC ---
      # First, get the Role ARN from Pulumi stack outputs
      - name: Get Pulumi Stack Outputs
        id: get_pulumi_outputs
        run: |
          pulumi stack select prod --cwd ./pulumi # Ensure correct stack is selected
          pulumi stack output --json --cwd ./pulumi > pulumi-outputs.json
          # Optional: Output the file content for debugging
          echo "--- Pulumi Outputs (pulumi-outputs.json) ---"
          cat pulumi-outputs.json
          echo "-------------------------------------------"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }} # Region needed for Pulumi stack access

      - name: Extract Role ARN from Output
        id: extract_role_arn
        run: |
          ROLE_ARN=$(jq -r '.githubActionsRoleArn' pulumi-outputs.json)
          echo "AWS_ROLE_TO_ASSUME=${ROLE_ARN}" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --- Login to ECR ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Build and Push Docker Image ---
      - name: Define Image Tag
        id: image_tag
        # Use commit SHA for unique tags
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get ECR Repository Name from Pulumi Output
        id: get_ecr_repo
        run: |
          REPO_NAME=$(jq -r '.ecrRepositoryName' pulumi-outputs.json)
          echo "ECR_REPOSITORY=${REPO_NAME}" >> $GITHUB_ENV
          echo "Repository name: ${REPO_NAME}" # For logging

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
        run: |
          echo "Building image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          # Use the simpler build command without secrets
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          echo "Pushing image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        # working-directory: ./ # Build context is root

      # --- Deploy using Pulumi ---
      - name: Update Pulumi Stack Config with New Image Tag
        id: pulumi_up
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: prod # Your stack name
          work-dir: ./pulumi # Run in the pulumi directory
          refresh: true # Refresh state before update
          # Pass the specific image tag to the Pulumi program via config
          config-map: |
            { "image": "${{ steps.build-image.outputs.image }}" }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          # AWS creds already configured via OIDC role

      - name: Show App URL after deploy
        run: |
          APP_URL=$(jq -r '.appUrl' pulumi-outputs.json) # Get URL from last output
          echo "Application successfully deployed."
          echo "Access URL: ${APP_URL}"
